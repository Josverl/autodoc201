errno
=====

.. py:module:: errno

.. autoapi-nested-parse::

   System error codes.

   MicroPython module: https://docs.micropython.org/en/v1.23.0/library/errno.html

   CPython module: :mod:`python:errno` https://docs.python.org/3/library/errno.html .

   This module provides access to symbolic error codes for `OSError` exception.
   A particular inventory of codes depends on :term:`MicroPython port`.



Attributes
----------

.. autoapisummary::

   errno.EAGAIN
   errno.EEXIST
   errno.errorcode


Package Contents
----------------

.. py:data:: EAGAIN
   :type:  _typeshed.Incomplete

   Error codes, based on ANSI C/POSIX standard. All error codes start with
   "E". As mentioned above, inventory of the codes depends on
   :term:`MicroPython port`. Errors are usually accessible as ``exc.errno``
   where ``exc`` is an instance of `OSError`. Usage example::

   try:
   os.mkdir("my_dir")
   except OSError as exc:
   if exc.errno == errno.EEXIST:
   print("Directory already exists")


.. py:data:: EEXIST
   :type:  _typeshed.Incomplete

   Error codes, based on ANSI C/POSIX standard. All error codes start with
   "E". As mentioned above, inventory of the codes depends on
   :term:`MicroPython port`. Errors are usually accessible as ``exc.errno``
   where ``exc`` is an instance of `OSError`. Usage example::

   try:
   os.mkdir("my_dir")
   except OSError as exc:
   if exc.errno == errno.EEXIST:
   print("Directory already exists")


.. py:data:: errorcode
   :type:  Dict

   Dictionary mapping numeric error codes to strings with symbolic error
   code (see above)::

   >>> print(errno.errorcode[errno.EEXIST])
   EEXIST


