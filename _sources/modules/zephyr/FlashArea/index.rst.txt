zephyr.FlashArea
================
.. This document was autogenerated by Sphinx-autoapi from a .pyi stub or a source code file.
.. Do not edit this file, instead edit the source file and run Sphinx to update. 
.. Source: docs/stubs/zephyr/FlashArea.pyi

.. py:module:: zephyr.FlashArea


Classes
-------

.. autoapisummary::

   zephyr.FlashArea.FlashArea


Module Contents
---------------

.. py:class:: FlashArea(id, block_size)

   Gets an object for accessing flash memory at partition specified by ``id`` and with block size of ``block_size``.

   ``id`` values are integers correlating to fixed flash partitions defined in the devicetree.
   A commonly used partition is the designated flash storage area defined as ``FlashArea.STORAGE`` if
   ``FLASH_AREA_LABEL_EXISTS(storage)`` returns true at boot.
   Zephyr devicetree fixed flash partitions are ``boot_partition``, ``slot0_partition``, ``slot1_partition``, and
   ``scratch_partition``. Because MCUBoot is not enabled by default for MicroPython, these fixed partitions can be accessed by
   ID integer values 1, 2, 3, and 4, respectively.


   .. py:method:: ioctl(cmd, arg) -> _typeshed.Incomplete

      These methods implement the simple and extended
      :ref:`block protocol <block-device-interface>` defined by
      :class:`vfs.AbstractBlockDev`.



   .. py:method:: readblocks(block_num, buf, offset: Optional[int] = 0) -> _typeshed.Incomplete


   .. py:method:: writeblocks(block_num, buf, offset: Optional[int] = 0) -> _typeshed.Incomplete



