gzip -- Gzip compression & decompression.
=========================================
.. This document was autogenerated by Sphinx-autoapi from a .pyi stub or a source code file.
.. Do not edit this file, instead edit the source file and run Sphinx to update. 
.. Source: docs/stubs/gzip/__init__.pyi

.. py:module:: gzip

.. autoapi-nested-parse::

   Gzip compression & decompression.

   |see_cpython_module| :mod:`python:gzip`.

   This module allows compression and decompression of binary data with the
   `DEFLATE algorithm <https://en.wikipedia.org/wiki/DEFLATE>`_ used by the gzip
   file format.

   .. note:: Prefer to use :class:`deflate.DeflateIO` instead of the functions in this
      module as it provides a streaming interface to compression and decompression
      which is convenient and more memory efficient when working with reading or
      writing compressed data to a file, socket, or stream.

   **Availability:**

   * This module is **not present by default** in official MicroPython firmware
     releases as it duplicates functionality available in the :mod:`deflate
     <deflate>` module.

   * A copy of this module can be installed (or frozen)
     from :term:`micropython-lib` (`source <https://github.com/micropython/micropython-lib/blob/master/python-stdlib/gzip/gzip.py>`_).
     See :ref:`packages` for more information. This documentation describes that module.

   * Compression support will only be available if compression support is enabled
     in the built-in :mod:`deflate <deflate>` module.



Classes
-------

.. autoapisummary::

   gzip.GzipFile


Functions
---------

.. autoapisummary::

   gzip.compress
   gzip.decompress
   gzip.open


Module Contents
---------------

.. py:class:: GzipFile(*, fileobj, mode)

   This class can be used to wrap a *fileobj* which is any
   :term:`stream-like <stream>` object such as a file, socket, or stream
   (including :class:`io.BytesIO`). It is itself a stream and implements the
   standard read/readinto/write/close methods.

   When the *mode* argument is ``"rb"``, reads from the GzipFile instance will
   decompress the data in the underlying stream and return decompressed data.

   If compression support is enabled then the *mode* argument can be set to
   ``"wb"``, and writes to the GzipFile instance will be compressed and written
   to the underlying stream.

   By default the GzipFile class will read and write data using the gzip file
   format, including a header and footer with checksum and a window size of 512
   bytes.

   The **file**, **compresslevel**, and **mtime** arguments are not
   supported. **fileobj** and **mode** must always be specified as keyword
   arguments.


.. py:function:: compress(data) -> _typeshed.Incomplete

   Compresses *data* into a bytes object.


.. py:function:: decompress(data) -> _typeshed.Incomplete

   Decompresses *data* into a bytes object.


.. py:function:: open(filename, mode) -> _typeshed.Incomplete

   Wrapper around built-in :func:`open` returning a GzipFile instance.



