machine.Timer
=============
.. This document was autogenerated by Sphinx-autoapi from a .pyi stub or a source code file.
.. Do not edit this file, instead edit the source file and run Sphinx to update. 
.. Source: docs/stubs/machine/Timer.pyi

.. py:module:: machine.Timer


Classes
-------

.. autoapisummary::

   machine.Timer.Timer


Module Contents
---------------

.. py:class:: Timer(id=-1, *args, **kwargs)

   Construct a new timer object of the given ``id``. ``id`` of -1 constructs a
   virtual timer (if supported by a board).
   ``id`` shall not be passed as a keyword argument.

   See ``init`` for parameters of initialisation.


   .. py:method:: deinit() -> None

      Deinitialises the timer. Stops the timer, and disables the timer peripheral.



   .. py:method:: init(*, mode=PERIODIC, freq=-1, period=-1, callback=None) -> None

      Initialise the timer. Example::

          def mycallback(t):
              pass

          # periodic at 1kHz
          tim.init(mode=Timer.PERIODIC, freq=1000, callback=mycallback)

          # periodic with 100ms period
          tim.init(period=100, callback=mycallback)

          # one shot firing after 1000ms
          tim.init(mode=Timer.ONE_SHOT, period=1000, callback=mycallback)

      :keyword - ``mode`` can be one of:
                                         - ``Timer.ONE_SHOT`` - The timer runs once until the configured
                                           period of the channel expires.
                                         - ``Timer.PERIODIC`` - The timer runs periodically at the configured
                                           frequency of the channel.
      :keyword - ``freq`` - The timer frequency, in units of Hz.  The upper bound of: the frequency is dependent on the port.  When both the ``freq`` and
                                                                                      ``period`` arguments are given, ``freq`` has a higher priority and
                                                                                      ``period`` is ignored.
      :keyword - ``period`` - The timer period, in milliseconds.:
      :keyword - ``callback`` - The callable to call upon expiration of the timer period.: The callback must take one argument, which is passed the Timer object.
                                                                                           The ``callback`` argument shall be specified. Otherwise an exception
                                                                                           will occur upon timer expiration:
                                                                                           ``TypeError: 'NoneType' object isn't callable``



   .. py:attribute:: ONE_SHOT
      :type:  _typeshed.Incomplete

      Timer operating mode.


   .. py:attribute:: PERIODIC
      :type:  _typeshed.Incomplete

      Timer operating mode.



